function fig = EdulogPlot(data, loggers)
% Create a plot from Edulog data
%
% "data" is a structure generated by running an Edulogger experiment,
% consisting of the following fields:
% Time: The time (s) since the start of the experiment of each sample.
% (double)
% Concern: Whether or not each sample took more than twice the specified
% sample rate to retrieve (logical)
% Event (optional): Whether or not an event happened at this point
% (logical)
% An additional field for each kind of Edulogger used, containing the
% measurements taken at each point in data.Time. Fieldnames should line up 
% with the names specified in "loggers".
% "loggers" is a one dimensional cell array, with each string specifying
% the name of a different Edulogger as described in the Neulog API 
% literature:
% https://neulog.com/wp-content/uploads/2014/06/NeuLog-API-version-7.pdf
%
% "fig" is a Graphics Object containing the graph generated, properties of
% the graph can be changed by editing this object.

addpath(genpath('Plotting')) % Add the folder with necessary plotting functions to the path

if ~exist('piermorel-gramm-b0fc592', 'dir') % If GRAMM is not installed...
    error('Package required: <a href="https://uk.mathworks.com/matlabcentral/fileexchange/54465-gramm-complete-data-visualization-toolbox-ggplot2-r-like">@gramm by Pier Morel</a>') % Link to GRAMM on the MATLAB Exchange
end

sDim = get(0,'screensize'); % Get screensize

% Create 2-D matrix with the data from each logger on its own row
y = [];
for l = 1:length(loggers)
    y = [y; [data.(loggers{l})]];
end

close all % Close any open figures
fig = figure; % Create a blank figure
g = gramm('x',[data.Time], 'y',y); % Create GRAMM object with .Time as its x-axis and y as it's y-axis
g.set_names('x','Time (s)', 'y',''); % Set axis names (y is blank as logger names are included in figure titles)
g.geom_line(); % Add data as lines
if length(loggers) > 1 % if there are multiple loggers
    g.facet_grid(loggers', [], 'scale','free'); % Split into seperate graphs for each logger
end
if isfield(data, 'Event') % if there is event data
    g.geom_vline('xintercept', data([data.Event]).Time, 'style', 'k-') % Plot events as vertical lines
end
g.draw(); % Draw graphs
fig.Position([2,4]) = [100, sDim(4) - 200]; % Resize to the height of the screen - 200
fig.Position([1,3]) = [200, sDim(3) - 400];% Resize to the width of the screen - 400
